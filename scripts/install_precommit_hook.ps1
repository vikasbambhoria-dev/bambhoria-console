param()
# Installer: copies a shim pre-commit hook into .git/hooks that runs the PowerShell validator

Set-StrictMode -Version Latest
$ErrorActionPreference = 'Stop'

function Find-GitRoot {
    param(
        [string]$StartDir
    )
    $current = (Get-Item $StartDir).FullName
    while ($true) {
        if (Test-Path (Join-Path $current '.git')) {
            return $current
        }
        $parent = Split-Path -Parent $current
        if (-not $parent -or $parent -eq $current) { break }
        $current = $parent
    }
    return $null
}

$scriptDir = Split-Path -Parent $MyInvocation.MyCommand.Path
$repoRoot = Find-GitRoot -StartDir $scriptDir

if (-not $repoRoot) {
    Write-Warning "No .git directory found above '$scriptDir'. Skipping pre-commit hook installation."
    Write-Host "Tip: Initialize git and re-run:" -ForegroundColor Yellow
    Write-Host "  git init; git add .; git commit -m 'init'; pwsh -NoProfile -File scripts/install_precommit_hook.ps1" -ForegroundColor DarkGray
    exit 0
}

$gitHooks = Join-Path $repoRoot ".git/hooks"
if (-not (Test-Path $gitHooks)) {
    New-Item -ItemType Directory -Path $gitHooks -Force | Out-Null
}

$hookPath = Join-Path $gitHooks "pre-commit"
$psScript = "scripts/hooks/pre-commit.ps1"

$shim = @"
#!/usr/bin/env bash
# Auto-generated by scripts/install_precommit_hook.ps1
# Runs PowerShell pre-commit validator
if command -v pwsh >/dev/null 2>&1; then
  pwsh -NoProfile -ExecutionPolicy Bypass -File "$psScript"
else
  powershell -NoProfile -ExecutionPolicy Bypass -File "$psScript"
fi
"@

Set-Content -Path $hookPath -Value $shim -NoNewline -Encoding UTF8
# Ensure executable bit on Unix-like
try { & git update-index --chmod=+x -- "$hookPath" | Out-Null } catch {}

Write-Host "Installed pre-commit hook at $hookPath" -ForegroundColor Green
